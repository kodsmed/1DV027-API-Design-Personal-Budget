{
	"info": {
		"_postman_id": "cd417c90-bfeb-446c-b66c-9c4743d2d1d0",
		"name": "Personal Budget",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24865837"
	},
	"item": [
		{
			"name": "/users",
			"item": [
				{
					"name": "setup - start test run here.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script\r",
									"const randomUsername = 'user_' + Math.random().toString(36).substring(7);\r",
									"const randomEmail = randomUsername + '@example.com';\r",
									"let randomPassword = Math.random().toString(36).substring(7);\r",
									"randomPassword += randomPassword + randomPassword\r",
									"\r",
									"// Now set the variables\r",
									"pm.globals.set(\"activeUserUsername\", randomUsername);\r",
									"pm.globals.set(\"activeUserEmail\", randomEmail);\r",
									"pm.globals.set(\"activeUserPassword\", randomPassword);\r",
									"\r",
									"// Log the generated values\r",
									"console.log(\"Generated username: \", randomUsername);\r",
									"console.log(\"Generated email: \", randomEmail);\r",
									"console.log(\"Generated password: \", randomPassword);\r",
									"\r",
									"let tomorrow = new Date();\r",
									"tomorrow.setDate(tomorrow.getDate() + 1); // This sets 'tomorrow' to today's date plus one day.\r",
									"\r",
									"// Formatting the date as 'YYYY-MM-DD' if needed.\r",
									"let dateString = tomorrow.toISOString().split('T')[0];\r",
									"\r",
									"pm.globals.set(\"tomorrow\", dateString);\r",
									"\r",
									"console.log(\"Collection vars set... sending request to create user.\");\r",
									"pm.sendRequest;"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setNextRequest(\"Register new User\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// SAVE THE uuid\r",
									"const responseData = pm.response.json()\r",
									"pm.globals.set(\"uuid\", responseData.data.uuid)\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Username and email are non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.data.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
									"  pm.expect(responseData.data.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"UUID and ID are present and in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.uuid).to.be.a('string').and.to.have.lengthOf.at.least(1, \"UUID should not be empty\");\r",
									"    pm.expect(responseData.data.id).to.be.a('string').and.to.match(/^[0-9a-fA-F]{24}$/, \"ID should be a valid MongoDB ObjectID\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the 'Links' array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.Links).to.have.lengthOf(3);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{activeUserUsername}}\", \r\n    \"email\": \"{{activeUserEmail}}\",\r\n    \"password\": \"{{activeUserPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/users",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new User Failed - duplicate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 409\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(409);\r",
									"});\r",
									"\r",
									"pm.test(\"response message is 'Duplicate key.'\", function () {\r",
									"     var responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON.message).to.equal('Duplicate key.');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'Links' array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.Links).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{activeUserUsername}}\", \r\n    \"email\": \"{{activeUserEmail}}\",\r\n    \"password\": \"{{activeUserPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/users",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register new User Failed - validation error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response message is 'Validation failed.'\", function () {\r",
									"     var responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON.message).to.equal('Validation failed.');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'Links' array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.Links).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\", \r\n    \"email\": \"{{active_user_email}}\",\r\n    \"password\": \"{{active_user_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/users",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response message should be 'Invalid credentials' \")\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Links array should exist and be an array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Pagination object should be empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.pagination).to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('statusCode');\r",
									"  pm.expect(responseData).to.have.property('status');\r",
									"  pm.expect(responseData).to.have.property('message');\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData).to.have.property('Links');\r",
									"  pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"not@correct.com\",\r\n    \"password\": \"notAVallidPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/users/login",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//SAVE THE ACCESS TOKEN\r",
									"const responseData = pm.response.json();\r",
									"pm.globals.set('accessToken', responseData.data.accessToken)\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the data object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.data.user).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.data.accessToken).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.data.refreshToken).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Links array should exist and be an array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Pagination object should be empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.pagination).to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('statusCode');\r",
									"  pm.expect(responseData).to.have.property('status');\r",
									"  pm.expect(responseData).to.have.property('message');\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData).to.have.property('Links');\r",
									"  pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Access token and refresh token are non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData.data.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
									"  pm.expect(responseData.data.refreshToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{activeUserEmail}}\",\r\n    \"password\": \"{{activeUserPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/users/login",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response message is 'User details updated successfully'\", function () {\r",
									"     var responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON.message).to.equal('User details updated successfully');\r",
									"});\r",
									"\r",
									"pm.test(\"the username should be 'SomeOtherUsername'\", function () {\r",
									"     var responseData = pm.response.json();\r",
									"     pm.expect(responseData).to.be.an('object');\r",
									"     pm.expect(responseData.data.username).to.equal('SomeOtherUsername');\r",
									"});\r",
									"\r",
									"pm.test(\"email should be unchanged\", function () {\r",
									"     var responseData = pm.response.json();\r",
									"     pm.expect(responseData).to.be.an('object');\r",
									"     pm.expect(responseData.data.email).to.equal(pm.globals.get(\"activeUserEmail\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'Links' array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.Links).to.have.lengthOf(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"SomeOtherUsername\", \r\n    \"email\": \"{{activeUserEmail}}\",\r\n    \"password\": \"{{activeUserPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/users",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change username Failed - validation error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response message is 'Invalid username.'\", function () {\r",
									"     var responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON.message).to.equal('Invalid username.');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'Links' array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.Links).to.have.lengthOf(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"short\", \r\n    \"email\": \"{{activeUserEmail}}\",\r\n    \"password\": \"{{activeUserPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/users",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password and email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response message is 'User details updated successfully'\", function () {\r",
									"     var responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON.message).to.equal('User details updated successfully');\r",
									"});\r",
									"\r",
									"pm.test(\"the username should be 'SomeOtherUsername'\", function () {\r",
									"     var responseData = pm.response.json();\r",
									"     pm.expect(responseData).to.be.an('object');\r",
									"     pm.expect(responseData.data.username).to.equal('SomeOtherUsername');\r",
									"});\r",
									"\r",
									"pm.test(\"email should be someothermemail1@testing.com\", function () {\r",
									"     var responseData = pm.response.json();\r",
									"     pm.expect(responseData).to.be.an('object');\r",
									"     pm.expect(responseData.data.email).to.equal(\"someothermemail1@testing.com\");\r",
									"     \r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'Links' array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.Links).to.have.lengthOf((4));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"someothermemail1@testing.com\",\r\n    \"password\": \"validpasswordmorethan12chars\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/users",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "restore the user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response message is 'User details updated successfully'\", function () {\r",
									"     var responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON.message).to.equal('User details updated successfully');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'Links' array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.Links).to.have.lengthOf(4);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Get my budgets... no budgets\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{activeUserUsername}}\", \r\n    \"email\": \"{{activeUserEmail}}\",\r\n    \"password\": \"{{activeUserPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/users",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove the user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response message is 'User unregistered successfully'\", function () {\r",
									"     var responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON.message).to.equal('User unregistered successfully');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'Links' array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.Links).to.have.lengthOf(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/users",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove the user Failed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response message is 'User does not exist.'\", function () {\r",
									"     var responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON.message).to.equal('User does not exist.');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'Links' array is present and contains the expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.Links).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(null);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/users",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/budgets/:budgetId",
			"item": [
				{
					"name": "Get my budgets... no budgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message should say 'No budgets found'\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON.message).to.equal('No budgets found');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"data array is present and contains no objects\", function () {\r",
									"     var responseData = pm.response.json();\r",
									"     pm.expect(responseData).to.be.an('object');\r",
									"     pm.expect(responseData.data).to.be.an('array');\r",
									"     pm.expect(responseData.data).to.have.lengthOf(0, \"Data array should not contain any objects\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Links array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('Links').that.is.an('array').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Pagination object is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.pagination).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a budget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Message should say 'Budget created successfully'\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON.message).to.equal('Budget created successfully');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Links array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('Links').that.is.an('array').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Pagination object is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.pagination).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"budgetName\": \"Monthly spendings\",\r\n    \"budgetDescription\": \"my personal budget\",\r\n    \"budgetIteration\": \"monthly\",\r\n    \"budgetStartDate\" : \"{{tomorrow}}\",\r\n    \"ownerUUID\": \"{{uuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get my budgets... one result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// SAVE THE budgetId\r",
									"const responseData = pm.response.json();\r",
									"pm.collectionVariables.set('budgetId', responseData.data[0].id)\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Links array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('Links').that.is.an('array').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Pagination object is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.pagination).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rename the budget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message should say 'Budget updated successfully'\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON.message).to.equal('Budget updated successfully');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Links array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('Links').that.is.an('array').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Pagination object is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.pagination).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"budgetName\": \"My Monthly spendings\",\r\n    \"budgetDescription\": \"my personal budget\",\r\n    \"budgetIteration\": \"monthly\",\r\n    \"budgetStartDate\" : \"{{tomorrow}}\",\r\n    \"ownerUUID\": \"{{uuid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "view the budget with new name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"\r",
									"pm.test('Response has the required fields', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"})\r",
									"\r",
									"pm.test('UserAccess array contains userUUID and accessLevel for each element', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.userAccess).to.be.an('array');\r",
									"    responseData.data.userAccess.forEach(function (user) {\r",
									"        pm.expect(user.userUUID).to.exist.and.to.be.a('string');\r",
									"        pm.expect(user.accessLevel).to.exist.and.to.be.a('string');\r",
									"    });\r",
									"})\r",
									"\r",
									"pm.test(\"The budget have the correct name 'My Monthly spendings'\", function () {\r",
									"   const responseData = pm.response.json()\r",
									"   pm.expect(responseData.data.budgetName).to.equal(\"My Monthly spendings\");\r",
									"});\r",
									"\r",
									"pm.test('Ensure the Links array contains rel, href, and method for each element', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function (link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"})\r",
									"\r",
									"postman.setNextRequest(\"create category Rent\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the budget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message should say 'Budget deleted successfully'\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON.message).to.equal('Budget deleted successfully');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Links array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('Links').that.is.an('array').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Pagination object is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.pagination).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete the budget Failed - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Message should say 'Budget not found.'\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON.message).to.equal('Budget not found.');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Links array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('Links').that.is.an('array').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Pagination object is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.pagination).to.exist;\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"remove the user\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/budgets/:budgetId/categories",
			"item": [
				{
					"name": "get all categories on budgetId - no categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response has the required fields', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.statusCode).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"    pm.expect(responseData.Links).to.exist;\r",
									"    pm.expect(responseData.pagination).to.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"Category data validation, expect the no categories\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data).to.be.an('array');\r",
									"  pm.expect(responseData.data).to.have.length(0);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test('Expenses array is present and has expected number of elements', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');\r",
									"    responseData.data.forEach(category => {\r",
									"        pm.expect(category.expenses).to.exist.and.to.be.an('array');\r",
									"    });\r",
									"})\r",
									"\r",
									"pm.test('OwnerUUID is a non-empty string', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    responseData.data.forEach(function (category) {\r",
									"        category.expenses.forEach(function (expense) {\r",
									"            pm.expect(expense.ownerUUID).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');\r",
									"        });\r",
									"    });\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "create category Rent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"categories array contains the correct informatio\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.categories[0].categoryName).to.equal(\"Rent\");\r",
									"    pm.expect(responseData.data.categories[0].categoryLimit).to.equal(6500);\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"Rent\",\r\n    \"categoryLimit\": 6500\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "create category Utilities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"categories array contains the correct informatio\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.categories[0].categoryName).to.equal(\"Rent\");\r",
									"    pm.expect(responseData.data.categories[0].categoryLimit).to.equal(6500);\r",
									"    pm.expect(responseData.data.categories[1].categoryName).to.equal(\"Utillities\")\r",
									"    pm.expect(responseData.data.categories[1].categoryLimit).to.equal(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"Utillities\",\r\n    \"categoryLimit\": 2000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "create category Food",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"categories array contains the correct informatio\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.categories[0].categoryName).to.equal(\"Rent\");\r",
									"    pm.expect(responseData.data.categories[0].categoryLimit).to.equal(6500);\r",
									"    pm.expect(responseData.data.categories[1].categoryName).to.equal(\"Utillities\")\r",
									"    pm.expect(responseData.data.categories[1].categoryLimit).to.equal(2000);\r",
									"    pm.expect(responseData.data.categories[2].categoryName).to.equal(\"Food\")\r",
									"    pm.expect(responseData.data.categories[2].categoryLimit).to.equal(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"Food\",\r\n    \"categoryLimit\": 1500\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "duplicate category Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 409\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Message should say 'The category Food aldready exists.'\", function ()  {\r",
									"    const responseData = pm.response.json();\r",
									"    const message = responseData.message\r",
									"\r",
									"    pm.expect(message).to.equal(\"The category Food already exists.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"Food\",\r\n    \"categoryLimit\": 1500\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "create category Transports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"categories array contains the correct information\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.categories[0].categoryName).to.equal(\"Rent\");\r",
									"    pm.expect(responseData.data.categories[0].categoryLimit).to.equal(6500);\r",
									"    pm.expect(responseData.data.categories[1].categoryName).to.equal(\"Utillities\")\r",
									"    pm.expect(responseData.data.categories[1].categoryLimit).to.equal(2000);\r",
									"    pm.expect(responseData.data.categories[2].categoryName).to.equal(\"Food\")\r",
									"    pm.expect(responseData.data.categories[2].categoryLimit).to.equal(1500);\r",
									"    pm.expect(responseData.data.categories[3].categoryName).to.equal(\"Transports\")\r",
									"    pm.expect(responseData.data.categories[3].categoryLimit).to.equal(4000);\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"Transports\",\r\n    \"categoryLimit\": 4000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "create category Failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"\",\r\n    \"categoryLimit\": 4000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "change Transports => CommutingCard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"categories array contains the correct information\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.categories[0].categoryName).to.equal(\"Rent\");\r",
									"    pm.expect(responseData.data.categories[0].categoryLimit).to.equal(6500);\r",
									"    pm.expect(responseData.data.categories[1].categoryName).to.equal(\"Utillities\")\r",
									"    pm.expect(responseData.data.categories[1].categoryLimit).to.equal(2000);\r",
									"    pm.expect(responseData.data.categories[2].categoryName).to.equal(\"Food\")\r",
									"    pm.expect(responseData.data.categories[2].categoryLimit).to.equal(1500);\r",
									"    pm.expect(responseData.data.categories[3].categoryName).to.equal(\"CommutingCard\")\r",
									"    pm.expect(responseData.data.categories[3].categoryLimit).to.equal(1200);\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"CommutingCard\",\r\n    \"categoryLimit\": 1200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/3",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "change Transports => CommutingCard Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"categories array contains the correct information\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.categories[0].categoryName).to.equal(\"Rent\");\r",
									"    pm.expect(responseData.data.categories[0].categoryLimit).to.equal(6500);\r",
									"    pm.expect(responseData.data.categories[1].categoryName).to.equal(\"Utillities\")\r",
									"    pm.expect(responseData.data.categories[1].categoryLimit).to.equal(2000);\r",
									"    pm.expect(responseData.data.categories[2].categoryName).to.equal(\"Food\")\r",
									"    pm.expect(responseData.data.categories[2].categoryLimit).to.equal(1500);\r",
									"    pm.expect(responseData.data.categories[3].categoryName).to.equal(\"CommutingCard\")\r",
									"    pm.expect(responseData.data.categories[3].categoryLimit).to.equal(1200);\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"CommutingCard\",\r\n    \"categoryLimit\": 1200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/3",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "change category Failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message should be 'Category limit must be greater than 0.'\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"    pm.expect(responseJSON.message).to.equal('Category limit must be greater than 0.');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"CommutingCard\",\r\n    \"categoryLimit\": -1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/3",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "change category Failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response message is 'Category name is required.'\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON.message).to.equal('Category name is required.');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"\",\r\n    \"categoryLimit\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/3",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "create category Luxury",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"categories array contains the correct information\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.categories[0].categoryName).to.equal(\"Rent\");\r",
									"    pm.expect(responseData.data.categories[0].categoryLimit).to.equal(6500);\r",
									"    pm.expect(responseData.data.categories[1].categoryName).to.equal(\"Utillities\")\r",
									"    pm.expect(responseData.data.categories[1].categoryLimit).to.equal(2000);\r",
									"    pm.expect(responseData.data.categories[2].categoryName).to.equal(\"Food\")\r",
									"    pm.expect(responseData.data.categories[2].categoryLimit).to.equal(1500);\r",
									"    pm.expect(responseData.data.categories[3].categoryName).to.equal(\"CommutingCard\")\r",
									"    pm.expect(responseData.data.categories[3].categoryLimit).to.equal(1200);\r",
									"    pm.expect(responseData.data.categories[4].categoryName).to.equal(\"Luxury\")\r",
									"    pm.expect(responseData.data.categories[4].categoryLimit).to.equal(9000000);\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"Luxury\",\r\n    \"categoryLimit\": 9000000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete category Luxury",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"message should be 'Category deleted'\", function (){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.equal(\"Category deleted\") \r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"categories array contains the correct information\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.categories[0].categoryName).to.equal(\"Rent\");\r",
									"    pm.expect(responseData.data.categories[0].categoryLimit).to.equal(6500);\r",
									"    pm.expect(responseData.data.categories[1].categoryName).to.equal(\"Utillities\")\r",
									"    pm.expect(responseData.data.categories[1].categoryLimit).to.equal(2000);\r",
									"    pm.expect(responseData.data.categories[2].categoryName).to.equal(\"Food\")\r",
									"    pm.expect(responseData.data.categories[2].categoryLimit).to.equal(1500);\r",
									"    pm.expect(responseData.data.categories[3].categoryName).to.equal(\"CommutingCard\")\r",
									"    pm.expect(responseData.data.categories[3].categoryLimit).to.equal(1200);\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"Luxury\",\r\n    \"categoryLimit\": 9000000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/4",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete category Luxury Failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"message should be 'Category not found.'\", function (){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.equal(\"Category not found.\") \r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\":\"Luxury\",\r\n    \"categoryLimit\": 9000000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/4",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all categories on budgetId - 4 categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.statusCode).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"    pm.expect(responseData.Links).to.exist;\r",
									"    pm.expect(responseData.pagination).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Category data validation\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data).to.be.an('array');\r",
									"  responseData.data.forEach(function(category) {\r",
									"    pm.expect(category.categoryName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category name should not be empty\");\r",
									"    pm.expect(category.categoryLimit).to.be.a('number').and.to.be.at.least(0, \"Category limit should be a non-negative integer\");\r",
									"  });\r",
									"});\r",
									"\r",
									"pm.test(\"categories length should be 4\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.have.length(4);\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Expenses array is present and has expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');\r",
									"    \r",
									"    responseData.data.forEach(category => {\r",
									"        pm.expect(category.expenses).to.exist.and.to.be.an('array');\r",
									"        // Add additional check for expected number of elements in the expenses array if needed\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"OwnerUUID is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    responseData.data.forEach(function(category) {\r",
									"        category.expenses.forEach(function(expense) {\r",
									"            pm.expect(expense.ownerUUID).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/budgets/:budgetId/categories/:category",
			"item": [
				{
					"name": "add expense to Rent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"categories array contains the correct informatio\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.categories[0].categoryName).to.equal(\"Rent\");\r",
									"    pm.expect(responseData.data.categories[0].categoryLimit).to.equal(6500);\r",
									"    pm.expect(responseData.data.categories[1].categoryName).to.equal(\"Utillities\")\r",
									"    pm.expect(responseData.data.categories[1].categoryLimit).to.equal(2000);\r",
									"    pm.expect(responseData.data.categories[2].categoryName).to.equal(\"Food\")\r",
									"    pm.expect(responseData.data.categories[2].categoryLimit).to.equal(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"the Rent Category contains the correct information.\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"\r",
									"    var rentCategory = responseJSON.data.categories.find(category => category.categoryName === 'Rent');\r",
									"    pm.expect(rentCategory).to.exist;\r",
									"    pm.expect(rentCategory.categoryName).to.equal('Rent');\r",
									"    pm.expect(rentCategory.categoryLimit).to.be.a('number');\r",
									"    pm.expect(rentCategory.expenses).to.be.an('array');\r",
									"    rentCategory.expenses.forEach(expense => {\r",
									"     pm.expect(expense.ownerUUID).to.be.a('string');\r",
									"     pm.expect(expense.date).to.be.a('string');\r",
									"     pm.expect(expense.amount).to.be.a('number');\r",
									"    \r",
									"    });\r",
									"    pm.expect(rentCategory.expenses[0].amount).to.equal(4100);\r",
									"}); \r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": \"4100\",\r\n    \"note\": \"rent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/0/expenses",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"0",
								"expenses"
							]
						}
					},
					"response": []
				},
				{
					"name": "get expenses on Rent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"\r",
									"pm.test('Response has the required fields', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"})\r",
									"\r",
									"pm.test('the Rent Category contains the correct information.', function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"    var rentCategory = responseJSON.data;\r",
									"    pm.expect(rentCategory).to.exist;\r",
									"    rentCategory.forEach(expense => {\r",
									"        pm.expect(expense.ownerUUID).to.be.a('string');\r",
									"        pm.expect(expense.date).to.be.a('string');\r",
									"        pm.expect(expense.amount).to.be.a('number');\r",
									"        pm.expect(expense.amount).to.equal(4100);\r",
									"    });\r",
									"})\r",
									"\r",
									"pm.test('Ensure the Links array contains rel, href, and method for each element', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function (link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"})\r",
									"\r",
									"const currentValue = pm.globals.get('incremental');\r",
									"\r",
									"pm.globals.set('incremental', currentValue + 1)\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/0/expenses",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"0",
								"expenses"
							]
						}
					},
					"response": []
				},
				{
					"name": "add another expense to Rent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"categories array contains the correct informatio\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.categories[0].categoryName).to.equal(\"Rent\");\r",
									"    pm.expect(responseData.data.categories[0].categoryLimit).to.equal(6500);\r",
									"    pm.expect(responseData.data.categories[1].categoryName).to.equal(\"Utillities\")\r",
									"    pm.expect(responseData.data.categories[1].categoryLimit).to.equal(2000);\r",
									"    pm.expect(responseData.data.categories[2].categoryName).to.equal(\"Food\")\r",
									"    pm.expect(responseData.data.categories[2].categoryLimit).to.equal(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"the Rent Category contains the correct information.\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"\r",
									"    var rentCategory = responseJSON.data.categories.find(category => category.categoryName === 'Rent');\r",
									"    pm.expect(rentCategory).to.exist;\r",
									"    pm.expect(rentCategory.categoryName).to.equal('Rent');\r",
									"    pm.expect(rentCategory.categoryLimit).to.be.a('number');\r",
									"    pm.expect(rentCategory.expenses).to.be.an('array');\r",
									"    rentCategory.expenses.forEach(expense => {\r",
									"     pm.expect(expense.ownerUUID).to.be.a('string');\r",
									"     pm.expect(expense.date).to.be.a('string');\r",
									"     pm.expect(expense.amount).to.be.a('number');\r",
									"    \r",
									"    });\r",
									"    pm.expect(rentCategory.expenses[0].amount).to.equal(4100);\r",
									"    pm.expect(rentCategory.expenses[1].amount).to.equal(100);\r",
									"}); \r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": \"100\",\r\n    \"note\": \"renters union fee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/0/expenses",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"0",
								"expenses"
							]
						}
					},
					"response": []
				},
				{
					"name": "view a single expense",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('statusCode', 'status', 'message', 'data', 'Links', 'pagination');",
									"})",
									"",
									"pm.test('Amount is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.data.amount).to.be.a('number');",
									"    pm.expect(responseData.data.amount).to.be.at.least(0, 'Amount should be a non-negative integer');",
									"})",
									"",
									"pm.test(\"Date is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    var dateFormat = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/",
									"    pm.expect(responseData.data.date).to.match(dateFormat)",
									"",
									"});",
									"",
									"pm.test('Links array is present and contains the expected number of elements', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.Links).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.Links.length).to.equal(6);",
									"})",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": \"-4100\",\r\n    \"note\": \"rent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/0/expenses/0",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"0",
								"expenses",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "change expense to on Rent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"\r",
									"pm.test('Response has the required fields', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"})\r",
									"\r",
									"pm.test('the data contains the correct information.', function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"    var expense = responseJSON.data;\r",
									"    pm.expect(expense).to.exist;\r",
									"    pm.expect(expense.ownerUUID).to.be.a('string');\r",
									"    pm.expect(expense.date).to.be.a('string');\r",
									"    pm.expect(expense.amount).to.be.a('number');\r",
									"    pm.expect(expense.amount).to.equal(10);\r",
									"    pm.expect(expense.note).to.equal(\"fee to renters union\")\r",
									"})\r",
									"\r",
									"pm.test('Ensure the Links array contains rel, href, and method for each element', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function (link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": \"10\",\r\n    \"note\": \"fee to renters union\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/0/expenses/1",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"0",
								"expenses",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete expense from Rent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/0/expenses/1",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"0",
								"expenses",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "update expense Failed - wrong input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('statusCode', 'status', 'message', 'data', 'Links', 'pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the data object is empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data).to.eql({});\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Links and pagination properties exist in the response\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.Links).to.exist;\r",
									"  pm.expect(responseData.pagination).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": \"-4100\",\r\n    \"note\": \"rent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/0/expenses/0",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"0",
								"expenses",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "update expense Failed - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response message is 'Expense not found'\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"    pm.expect(responseJSON.message).to.equal('Expense not found');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('statusCode', 'status', 'message', 'data', 'Links', 'pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the data object is empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data).to.eql({});\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Links and pagination properties exist in the response\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.Links).to.exist;\r",
									"  pm.expect(responseData.pagination).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": \"4100\",\r\n    \"note\": \"rent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/0/expenses/999999",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"0",
								"expenses",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete expense from Rent - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 4040\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response message should be 'Expense not found' \", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON.message).to.equal('Expense not found');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('statusCode');\r",
									"    pm.expect(responseData).to.have.property('status');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('Links');\r",
									"    pm.expect(responseData).to.have.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure the Links array contains rel, href, and method for each element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.Links).to.be.an('array');\r",
									"    responseData.Links.forEach(function(link) {\r",
									"        pm.expect(link).to.have.property('rel');\r",
									"        pm.expect(link).to.have.property('href');\r",
									"        pm.expect(link).to.have.property('method');\r",
									"    });\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Delete the budget\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cscloud8-59.lnu.se/personal-budget/api/v1/budgets/{{budgetId}}/categories/0/expenses/10000000",
							"protocol": "https",
							"host": [
								"cscloud8-59",
								"lnu",
								"se"
							],
							"path": [
								"personal-budget",
								"api",
								"v1",
								"budgets",
								"{{budgetId}}",
								"categories",
								"0",
								"expenses",
								"10000000"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "active_user_email\n",
			"value": "",
			"type": "string"
		},
		{
			"key": "active_user_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "active_user_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "active_user_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "baseULR",
			"value": "localhost:8080/api/v1"
		},
		{
			"key": "active_user_email",
			"value": ""
		},
		{
			"key": "budgetId",
			"value": "660283e4167cdfc04ba39365",
			"disabled": true
		},
		{
			"key": "budgetId",
			"value": ""
		}
	]
}