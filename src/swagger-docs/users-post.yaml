paths:
  /api/v1/users:
    post:
      summary: Register a new user
      tags:
        - users
      description: Endpoint to register a new user in the system.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  pattern: "^[A-Za-z][A-Za-z0-9_-]{7,31}$"
                  description: "Alphanumeric characters, underscores, and dashes only. Must be 8 to 32 characters long and start with a letter."
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  minLength: 12
                  maxLength: 256
                  description: "Must be 12 to 256 characters long."
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: Created
                  message:
                    type: string
                    example: User registered successfully
                  data:
                    type: object
                    example:
                      {
                        "username": "user_ihrn5j",
                        "password": "**********",
                        "email": "user_ihrn5j@example.com",
                        "uuid": "4d5139fe-b06b-4b85-937f-b865abe87298",
                        "id": "660556dbd6f47113ae5340d6",
                      }
                  Links:
                    type: array
                    example:
                      [
                        {
                          "rel": "login",
                          "href": "http://localhost:8080/api/v1/users/login",
                          "method": "POST",
                        },
                        {
                          "rel": "update",
                          "href": "http://localhost:8080/api/v1/users",
                          "method": "PUT",
                        },
                        {
                          "rel": "delete",
                          "href": "http://localhost:8080/api/v1/users",
                          "method": "DELETE",
                        },
                      ]
                  pagination:
                    type: object
                    example: {}
        "400":
          description: Bad Request - Invalid user data
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "statusCode": 400,
                    "status": "Error",
                    "message": "Validation failed.",
                    "data": {},
                    "Links":
                      [
                        {
                          "rel": "register",
                          "href": "http://localhost:8080/api/v1/users",
                          "method": "POST",
                        },
                      ],
                    "pagination": {},
                  }
        "409":
          description: Conflict - User already exists
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "statusCode": 409,
                    "status": "Error",
                    "message": "Duplicate key.",
                    "data": {},
                    "Links":
                      [
                        {
                          "rel": "register",
                          "href": "http://localhost:8080/api/v1/users",
                          "method": "POST",
                        },
                      ],
                    "pagination": {},
                  }
        "500":
          description: Conflict - User already exists
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "statusCode": 500,
                    "status": "Error",
                    "message": "Internal server error.",
                    "data": {},
                    "Links":
                      [
                        {
                          "rel": "register",
                          "href": "http://localhost:8080/api/v1/users",
                          "method": "POST",
                        },
                      ],
                    "pagination": {},
                  }
