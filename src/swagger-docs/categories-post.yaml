paths:
  /api/v1/budgets/{budgetId}/categories:
    post:
      summary: Add a category to the budget
      tags:
        - categories
      description: Adds a new category to the specified budget.
      operationId: addCategory
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: budgetId
          required: true
          schema:
            type: string
          description: Unique identifier of the budget to which the category will be added
      requestBody:
        required: true
        description: expenses is an optional field and can be left as an empty array []
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryName:
                  required: true
                  type: string
                  example: "Groceries"
                categoryLimit:
                  required: true
                  type: number
                  example: 500
                expenses:
                  required: false
                  type: array
                  items:
                    type: object
                    properties:
                      ownerUUID:
                        type: string
                        example: "a1b2c3d4"
                      amount:
                        type: number
                        example: 150
                      note:
                        type: string
                        example: "Supermarket"
      responses:

        '201':
          description: Category added to the budget
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: "Created"
                  message:
                    type: string
                    example: "Category added to budget"
                  data:
                    type: object
                    properties:
                      categoryName:
                        type: string
                        example: "Groceries"
                      categoryLimit:
                        type: number
                        example: 500
                      expenses:
                        type: array
                        items:
                          type: object
                        example: [
                          {
                            ownerUUID: "a1b2c3d4",
                            amount: 150,
                            note: "Supermarket"
                          }
                        ]
                  Links:
                    type: array
                    example:
                      - rel: "get all categories"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}/categories"
                        method: "GET"
                      - rel: "add category"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}/categories"
                        method: "POST"
                      - rel: "back to budget"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}"
                        method: "GET"
                      - rel: "logout"
                        href: "http://localhost:8080/api/v1/users/logout"
                        method: "POST"
                      - rel: "unregister"
                        href: "http://localhost:8080/api/v1/users"
                        method: "DELETE"
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  status:
                    type: string
                    example: "Error"
                  message:
                    type: string
                    example: "Validation failed"
                  data:
                    type: object
                  Links:
                    type: array
                    example:
                      - rel: "get all categories"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}/categories"
                        method: "GET"
                      - rel: "add category"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}/categories"
                        method: "POST"
                      - rel: "back to budget"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}"
                        method: "GET"
                      - rel: "logout"
                        href: "http://localhost:8080/api/v1/users/logout"
                        method: "POST"
                      - rel: "unregister"
                        href: "http://localhost:8080/api/v1/users"
                        method: "DELETE"
        '401':
          description: No, invalid, or expired token provided
          content:
            application/json:
              schema:
                $ref: '#/components/401ErrorResponse'
        '403':
          description: Forbidden - user does not have permission to add a category to the budget
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  status:
                    type: string
                    example: "Error"
                  message:
                    type: string
                    example: "User does not have permission to add a category to the budget"
                  data:
                    type: object
                  Links:
                    type: array
                    example:
                      - rel: "get all categories"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}/categories"
                        method: "GET"
                      - rel: "add category"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}/categories"
                        method: "POST"
                      - rel: "back to budget"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}"
                        method: "GET"
                      - rel: "logout"
                        href: "http://localhost:8080/api/v1/users/logout"
                        method: "POST"
                      - rel: "unregister"
                        href: "http://localhost:8080/api/v1/users"
                        method: "DELETE"
        '409':
          description: Category already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 409
                  status:
                    type: string
                    example: "Error"
                  message:
                    type: string
                    example: "Category already exists"
                  data:
                    type: object
                  Links:
                    type: array
                    example:
                      - rel: "get all categories"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}/categories"
                        method: "GET"
                      - rel: "add category"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}/categories"
                        method: "POST"
                      - rel: "back to budget"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}"
                        method: "GET"
                      - rel: "logout"
                        href: "http://localhost:8080/api/v1/users/logout"
                        method: "POST"
                      - rel: "unregister"
                        href: "http://localhost:8080/api/v1/users"
                        method: "DELETE"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  status:
                    type: string
                    example: "Error"
                  message:
                    type: string
                    example: "Internal server error"
                  data:
                    type: object
                  Links:
                    type: array
                    example:
                      - rel: "get all categories"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}/categories"
                        method: "GET"
                      - rel: "add category"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}/categories"
                        method: "POST"
                      - rel: "back to budget"
                        href: "http://localhost:8080/api/v1/budgets/{budgetId}"
                        method: "GET"
                      - rel: "logout"
                        href: "http://localhost:8080/api/v1/users/logout"
                        method: "POST"
                      - rel: "unregister"
                        href: "http://localhost:8080/api/v1/users"
                        method: "DELETE"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT